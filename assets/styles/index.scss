@import '~bootstrap/scss/bootstrap';

body {
  color: #fefdfa;
  background-color: #ce2d46;
  // #00ddfb
}

.new-game {
  display: flex;
  justify-content: center;
}

h1#welcome-message {
  display: flex;
  justify-content: center;
  margin-top: 25vh;
  font-family: 'Yellowtail', cursive;
  text-shadow: 3px 3px black;
  // #558ABB
}

#message, #get-games-message, .game-info-message {
  display: flex;
  justify-content: center;
  font-family: 'Kalam', cursive;
  font-size: 20px;
}

.game-info-message {
  display: flex;
  justify-content: center;
}

.entry-forms {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 10px;
}

.sign-up-form, .sign-in-form, .change-password-form {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 10px;
  padding: 10px;
  color: black;
}

#sign-in-email {
  display: flex;
}

#sign-in-password {
  display: flex;
}

#sign-up-email {
  display: flex;
}

#sign-up-password {
  display: flex;
}

#sign-up-password_confirmation {
  display: flex;
}

#old-password {
  display: flex;
}

#new-password {
  display: flex;
}

.sign-out-link {
  display: flex;
  justify-content: flex-end;
  margin-right: 190px; 
  font-family: 'Yellowtail', cursive;
  font-size: 30px;
  text-shadow: 3px 3px black;
}

a {
  color: #fefdfa;
  text-decoration: none;

  &:hover {
    color: #9dabbb;
    text-decoration: none;
  }
}

.sign-up-wrapper, .sign-in-wrapper, .change-password-wrapper {
  z-index: 1;
  background-color: white;
  border: 3px solid black;
  border-radius: 7%;
  margin: 10px;
  box-shadow: 1px 1px black;
}

input[type="submit"] {
  margin-top: 15px;
}

.view-played-games {
  display: flex;
  justify-content: center;
  margin-top: 10px;
}

.container {
  // Set the board container to take up 100% of the viewport's height
  // in this case that's the height of the browser
  display: flex;
  align-content: center;
  justify-content: center;
  height: 450px;
}

.board {
  // set the max height and the min width of the board
  // 100vh - 100% of the viewport height
  // use a method called `calc` to subtract some space around
  // each side
  width: 30vw;

  // Setting margin to auto will make the left/right margins the same size
  // which effectively centers the element.
  margin: auto;

  // Add cat background to board:
  // background: url('public/cat.jpg') no-repeat center center;
  // background-size: cover;
}

.box {
  background: white;
  // set the minimum height for each box to be a third of the parent's width
  // (board's height)
  // The calc method will take 100% of the parent's height and divide it by 3
  width: 150px;
  overflow: visible;
  height: 150px;
  
  // calc(100% / 3);

  // Set each box to have `display` be `flex` so we can center the content
  // (x's and o's) inside of the boxes
  display: flex;

  // Center the content along the main-axis (left-to-right because flex-direction defaults to `row`)
  justify-content: center;

  // Center the content along the cross-axis (top-to-bottom because the cross-axis is perpendicular to the main-axis)
  align-content: center;

  // Use `vh` to have the font size change as the viewport height changes as well
  font-size: 3rem;

  // Add a shadow to the x's and o's
  // Place the shadow 2px to the right & 2px below the text
  // Set the shadow color to be black & have 25% opacity
  text-shadow: 2px 2px rgba(0, 0, 0, .25);

  // Prevent the user from being able to select the x or o text
  user-select: none;

  // we want to have borders on the right of each box and the bottom of each box
  border-right: 3px solid black;
  border-bottom: 3px solid black;

  // & in sass indicates a nested style. This would be the same as doing
  // .box:nth-child(3n) in it's own separate block.
  //
  // Select the 3 right boxes using `:nth-child` - this will select elements
  // based on their position to their siblings
  // Pass `:nth-child()` the value `3n` which will select every 3rd box
  // 3rd box, then 6th box, then the 9th box
  &:nth-child(3n) {
    border-right: 0px;
  }

  // Select the bottom boxes using `:nth-last-child` which selects elements
  // based on their position **counting from the end**
  // `-1 + 3` represent the last three elements among a group of siblings

  // Break this down:
  // when n is 0: (-1 * 0) + 3 = 3rd // third from last box
  // when n is 1: (-1 * 1) + 2 = 2nd // second to last box
  // when n is 2: (-1 * 2) + 1 = 1st // first to last (or just last) box
  // Then we stop because there are no more elements
  &:nth-last-child(-1n + 3) {
    border-bottom: 0px;
  }

  // Add some color when we hover on a box:
  &:hover {
    background-color: LightSteelBlue;
    cursor: pointer;
  }
}
